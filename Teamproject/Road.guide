import folium
import networkx as nx
from geopy.distance import geodesic

def find_closest_waypoints(coord, all_coords, num_closest=3):
    closest_waypoints = sorted(all_coords, key=lambda x: geodesic(coord, all_coords[x]).kilometers)[:num_closest]
    return closest_waypoints

coords = {
    'start': (36.14548, 128.3928),
    'waypoint1': (36.14393, 128.3935),
    'waypoint2': (36.143805, 128.394),
    'waypoint3': (36.14354, 128.3932),
    'waypoint4': (36.14578, 128.3926),
    'waypoint5': (36.14595, 128.3929),
    'waypoint6': (36.14621, 128.3926),
    'waypoint7': (36.14609, 128.392),
    'waypoint8': (36.14536, 128.3932),
    'waypoint9': (36.14534, 128.392838),
    'waypoint10': (36.14555, 128.39323),
    'waypoint11': (36.14597, 128.39316),
    'waypoint12': (36.14327, 128.39408),
    'waypoint13': (36.14329, 128.39348),
    'waypoint14': (36.14345, 128.39408),
    'waypoint15': (36.14376, 128.39416),
    'waypoint16': (36.14343, 128.39313),
    'waypoint17': (36.14359, 128.3927),
    'waypoint18': (36.14355, 128.3928),
    'waypoint19': (36.14367, 128.392601),
    'waypoint20': (36.14379, 128.39248),
    'waypoint21': (36.14391, 128.3924),
    'waypoint22': (36.14465, 128.39218),
    'waypoint23': (36.14531, 128.39199),
    'waypoint24': (36.14605, 128.3917),
    'waypoint25': (36.14451, 128.39334),
    'waypoint26': (36.144907, 128.39327634),
    'waypoint27': (36.14364, 128.3928),
    'waypoint28': (36.1438, 128.39257),
    'waypoint29': (36.14425, 128.39238),
    'waypoint30': (36.14394, 128.39247),
    'waypoint31': (36.14531, 128.392068),
    'waypoint32': (36.145685, 128.392),
    'waypoint33': (36.145665, 128.39185),
    'end': (36.14311, 128.39374),
}

# Create a list to store roads
roads = []

# 각 좌표 간 거리 계산 및 roads 리스트에 추가
for point1, coord1 in coords.items():
    closest_waypoints = find_closest_waypoints(coord1, coords)
    for point2 in closest_waypoints:
        if point1 != point2:
            distance = geodesic(coord1, coords[point2]).kilometers
            roads.append((point1, point2, distance))

# 지도 시각화
mymap = folium.Map(location=coords['start'], zoom_start=6)

# 최단 경로 찾기
G = nx.Graph()
for road in roads:
    start, end, distance = road
    G.add_edge(start, end, weight=distance)

shortest_path = nx.shortest_path(G, source='start', target='end', weight='weight')
print("Shortest Path:", shortest_path)

# 최단 경로를 지도에 표시
for i in range(len(shortest_path) - 1):
    start, end = shortest_path[i], shortest_path[i + 1]
    folium.PolyLine([coords[start], coords[end]], color="red", weight=2.5, opacity=1).add_to(mymap)

# 지도를 HTML 파일로 저장
mymap








import folium
import networkx as nx
import math

# 좌표 설정
coordinates = {
    'start': (36.14548, 128.3928), 
    'waypoint1': (36.14393, 128.3935),
    'waypoint2': (36.143805, 128.394),
    'waypoint3': (36.14354, 128.3932),
    'waypoint4': (36.14578, 128.3926),
    'waypoint5': (36.14595, 128.3929),
    'waypoint6': (36.14621, 128.3926),
    'waypoint7': (36.14609, 128.392),
    'waypoint8': (36.14536, 128.3932),
    'waypoint9': (36.14534, 128.392838),
    'waypoint10': (36.14555, 128.39323),
    'waypoint11': (36.14597, 128.39316),
    'waypoint12': (36.14327, 128.39408),
    'waypoint13': (36.14329, 128.39348),
    'waypoint14': (36.14345, 128.39408),
    'waypoint15': (36.14376, 128.39416),
    'waypoint16': (36.14343, 128.39313),
    'waypoint17': (36.14359, 128.3927),
    'waypoint18': (36.14355, 128.3928),
    'waypoint19': (36.14367, 128.392601),
    'waypoint20': (36.14379, 128.39248),
    'waypoint21': (36.14391, 128.3924),
    'waypoint22': (36.14465, 128.39218),
    'waypoint23': (36.14531, 128.39199),
    'waypoint24': (36.14605, 128.3917),
    'waypoint25': (36.14451, 128.39334),
    'waypoint26': (36.144907, 128.39327634),
    'waypoint27': (36.14364, 128.3928),
    'waypoint28': (36.1438, 128.39257),
    'waypoint29': (36.14425, 128.39238),
    'waypoint30': (36.14394, 128.39247),
    'waypoint31': (36.14531, 128.392068),
    'waypoint32': (36.145685, 128.392),
    'waypoint33': (36.145665, 128.39185),   
    'end': (36.14311, 128.39374),
}

# 그래프 생성
G = nx.Graph()

# 노드 추가
for node, coord in coordinates.items():
    G.add_node(node, pos=coord)

# 각 노드에 대해 가장 가까운 두 개의 이웃 찾기
for node1 in G.nodes:
    distances = [(node2, math.sqrt((coordinates[node1][0] - coordinates[node2][0])**2 + (coordinates[node1][1] - coordinates[node2][1])**2)) for node2 in G.nodes if node1 != node2]
    closest_neighbors = sorted(distances, key=lambda x: x[1])[:2]
    for neighbor, distance in closest_neighbors:
        G.add_edge(node1, neighbor, weight=distance)

# 시작 노드와 목표 노드 설정
start_node = 'start'
end_node = 'end'

# 최단 경로 찾기
shortest_path = nx.shortest_path(G, source=start_node, target=end_node, weight='weight')

# folium 맵 생성
mymap = folium.Map(location=[0, 0], zoom_start=5)

# 노드 위치 추가
for node, coord in coordinates.items():
    folium.Marker(location=[coord[0], coord[1]], popup=str(node)).add_to(mymap)

# 간선 추가
for edge in G.edges:
    node1, node2 = edge
    folium.PolyLine([coordinates[node1], coordinates[node2]], color="gray", weight=2, opacity=0.5).add_to(mymap)

# 최단 경로 추가
for i in range(len(shortest_path) - 1):
    node1, node2 = shortest_path[i], shortest_path[i + 1]
    folium.PolyLine([coordinates[node1], coordinates[node2]], color="blue", weight=2.5, opacity=1).add_to(mymap)

# folium 맵을 HTML 파일로 저장
mymap
